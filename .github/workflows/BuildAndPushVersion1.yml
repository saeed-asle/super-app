name: Build and Push Images version 1

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]  

env:
  REGISTRY: docker.io 
  IMAGE_TAG: version1-${{ github.sha }}

jobs:
  extract-services:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install yq (YAML Parser)
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Extract Services with Buildable Images
        id: set-matrix
        run: |
          echo "Extracting services from docker-compose.yml..."
          services=$(yq eval -o=json '.services | to_entries | map(select(.value.build and .value.image) | .key)' superAppDocker/docker-compose.yml)

          if [ -z "$services" ] || [ "$services" = "[]" ]; then
            echo "No services found. Skipping build process."
            echo "matrix={\"service\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Services found: $services"
          echo "Setting matrix output..."
          echo "matrix=$(jq -c '{service: .}' <<< "$services")" >> $GITHUB_OUTPUT

  build:
    needs: extract-services
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.extract-services.outputs.matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and Push Service Image
        run: |
          SERVICE=${{ matrix.service }}
          BUILD_CONTEXT=$(yq eval ".services.$SERVICE.build.context" superAppDocker/docker-compose.yml)
          IMAGE_NAME=$(yq eval ".services.$SERVICE.image" superAppDocker/docker-compose.yml)
          TARGET_IMAGE="${{ env.REGISTRY }}/saeedasle/$IMAGE_NAME:${{ env.IMAGE_TAG }}"

          echo "Starting build and push process for service: $SERVICE..."
          docker buildx build --platform linux/amd64,linux/arm64 --push -t $TARGET_IMAGE -f "superAppDocker/$BUILD_CONTEXT/Dockerfile" "superAppDocker/$BUILD_CONTEXT"

          echo "Successfully built and pushed: $TARGET_IMAGE"
